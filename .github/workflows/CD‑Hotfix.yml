name: CD-Hotfix Manual

on:
  workflow_dispatch:
    inputs:
      hotfix_branch:

permissions:
  contents: write            # necessário para commit + tag
  packages: read

jobs:
  hotfix-release:
    runs-on: ubuntu-latest

    env:
      REGISTRY_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/kafka-user-poc   # ajuste ao seu repositório

    steps:
      # 0) validação
      - name: Validar se branch é hotfix
        run: |
          [[ "${{ github.event.inputs.hotfix_branch }}" == hotfix/* ]] \
            || { echo "Esta action só aceita branches hotfix/*"; exit 1; }

      # 1) checkout completo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2) JDK + cache
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # 3) build + testes na branch hotfix (garantia extra)
      - name: Build & Test
        run: mvn -B clean verify

      # 4) merge hotfix → main e calcular nova versão
      - name: Merge em main e calcular nova versão
        id: ver
        shell: bash
        run: |
          # Configura git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Debug: mostrar branches disponíveis
          echo "Branches remotas disponíveis:"
          git branch -r

          # Checkout e atualiza main
          git checkout main
          git pull origin main
          
          # Busca a branch remota e cria localmente
          git fetch --all
      
          # Faz o merge squash da branch hotfix
          git merge --squash ${{ github.event.inputs.hotfix_branch }}
          
          # Commit com mensagem descritiva incluindo as alterações
          COMMIT_MSG=$(git log main..${{ github.event.inputs.hotfix_branch }} --pretty=format:"- %s" | grep -v "Merge\|bump version")
          git commit -m "squash: merge hotfix ${{ github.event.inputs.hotfix_branch }}"

          git push origin main
          
          Alterações:
          $COMMIT_MSG"
          
          # Calcula nova versão
          CURR=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          IFS=. read MAJOR MINOR PATCH <<< "$CURR"
          NEW="${MAJOR}.${MINOR}.$((PATCH+1))"
          echo "new=$NEW" >> $GITHUB_OUTPUT
          echo "current=$CURR" >> $GITHUB_OUTPUT
              
      # 5) bump versão, tag e apagar branch hotfix
      - name: Bump versão, tag, push e apagar branch
        env:
          NEW_VER: ${{ steps.ver.outputs.new }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          mvn versions:set -DnewVersion=${NEW_VER} -DgenerateBackupPoms=false
          git add pom.xml
          git commit -m "chore: bump version to ${NEW_VER}"
          git push origin main

          git pull origin main       # sincroniza
          git tag -a "v${NEW_VER}" -m "Release ${NEW_VER}"
          git push origin "v${NEW_VER}"

          git push origin --delete ${{ github.event.inputs.hotfix_branch }}

      - name: Sync hotfix commit para develop (abre PR se houver conflito)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VER: ${{ steps.ver.outputs.new }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y gh >/dev/null
      
          # merge commit = HEAD~1 (HEAD é o commit de bump)
          MERGE_COMMIT=$(git rev-parse HEAD~1)
          git checkout develop
          git pull origin develop
      
          SYNC_BRANCH="sync-hotfix-${NEW_VER}"
          git checkout -b "$SYNC_BRANCH"
      
          if git cherry-pick -x "$MERGE_COMMIT"; then
            # sem conflitos: faz merge direto
            git push origin "$SYNC_BRANCH"
            git checkout develop
            git merge --no-ff "$SYNC_BRANCH" -m "Merge hotfix ${NEW_VER} into develop"
            git push origin develop
          else
            # conflito: mantém PR aberto
            git add -A
            git commit -m "WIP: resolve conflicts for hotfix ${NEW_VER}" || true
            git push -u origin "$SYNC_BRANCH"
      
            # NÃO rode 'gh auth login'! O token já está disponível via GH_TOKEN
            gh pr create \
              --base develop \
              --head "$SYNC_BRANCH" \
              --title "Sync hotfix ${NEW_VER} to develop (conflicts)" \
              --body "Cherry-pick do commit ${MERGE_COMMIT} gerou conflitos.  

      # 7) rebuild artefato (já com versão definitiva)
      - name: Rebuild (skip tests)
        run: mvn -B clean package -DskipTests

      # 8) login no Docker Hub
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9) setup buildx
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # 10) build & push da imagem versionada
      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_REPO }}:${{ steps.ver.outputs.new }}
            ${{ env.REGISTRY_REPO }}:latest
