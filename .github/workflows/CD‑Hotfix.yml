name: CD-Hotfix Manual

on:
  workflow_dispatch:
    inputs:
      hotfix_branch:
        description: 'Branch hotfix (ex: hotfix/1.2.3)'
        required: true

permissions:
  contents: write
  packages: read
  pull-requests: write  # necessário para criar PRs

jobs:
  hotfix-release:
    runs-on: ubuntu-latest
    env:
      REGISTRY_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/kafka-user-poc

    steps:
      # 0) Validação do nome da branch
      - name: Validate branch name
        uses: actions/github-script@v7
        with:
          script: |
            if (!context.payload.inputs.hotfix_branch.startsWith('hotfix/')) {
              core.setFailed('Esta action só aceita branches hotfix/*')
            }

      # 1) Checkout do código
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2) Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # 3) Build e Teste
      - name: Build & Test
        run: mvn -B clean verify

      # 4) Criar PR do hotfix para main
      - name: Create PR to main
        id: create_pr_main
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: ${{ github.event.inputs.hotfix_branch }}
          title: "Hotfix: ${{ github.event.inputs.hotfix_branch }} to main"
          body: "Aplicando hotfix na main"
          delete-branch: false

      # 5) Merge do PR na main
      - name: Merge PR to main
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pr_main.outputs.pull-request-number }}
          merge-method: squash

      # 6) Bump de versão
      - name: Bump version
        id: bump_version
        uses: christian-draeger/increment-semantic-version@1.1.0
        with:
          current-version: ${{ steps.get_version.outputs.current }}
          version-fragment: 'patch'

      # 7) Update version in pom.xml
      - name: Update version
        run: mvn versions:set -DnewVersion=${{ steps.bump_version.outputs.next-version }} -DgenerateBackupPoms=false

      # 8) Commit nova versão e criar tag
      - name: Create version commit and tag
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: bump version to ${{ steps.bump_version.outputs.next-version }}"
          tagging_message: "v${{ steps.bump_version.outputs.next-version }}"

      # 9) Criar PR para develop
      - name: Create PR to develop
        id: create_pr_develop
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: develop
          head: ${{ github.event.inputs.hotfix_branch }}
          title: "Sync: ${{ github.event.inputs.hotfix_branch }} to develop"
          body: "Sincronizando hotfix para develop"
          delete-branch: true

      # 10) Merge do PR no develop
      - name: Merge PR to develop
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pr_develop.outputs.pull-request-number }}
          merge-method: squash

      # 11) Build do Docker
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_REPO }}:${{ steps.bump_version.outputs.next-version }}
            ${{ env.REGISTRY_REPO }}:latest
